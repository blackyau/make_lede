#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on:
  repository_dispatch:
#  release:
#    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  CLONE_REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  COMMIT_FILES: true
  UPLOAD_RELEASE: true
  PUSH_RELEASE: true
  SAVE_PACKGES: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $CLONE_REPO_BRANCH openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

#     - name: Organize files
#       id: organize
#       if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
#       run: |
#         cd openwrt/bin/targets/*/*
#         zip -r all_ipk.zip packages
#         rm -rf packages
#         echo "::set-env name=FIRMWARE::$PWD"
#         echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

#
#     - name: Upload firmware to cowtransfer
#       if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
#       run: |
#         curl -fsSL git.io/file-transfer | sh
#         ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
#         echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

#     - name: Upload firmware to WeTransfer
#       if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
#       run: |
#         curl -fsSL git.io/file-transfer | sh
#         ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
#         echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    - name: Save Packages
      id: packages
      if: steps.compile.outputs.status == 'success' && env.SAVE_PACKGES == 'true' && !cancelled()
      run: |
        cd openwrt/bin/packages/*
        zip -r all_ipk.zip ./*
        mv all_ipk.zip $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/
        
# 在 bin 目录中初始化 git
    - name: Commit files
      id: commit
      if: steps.compile.outputs.status == 'success' && env.COMMIT_FILES == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        echo "::set-env name=FIRMWARE::$PWD"
        git init
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "deployed by GitHub Action" -a
        echo "::set-env name=RELEASE_TAG::$(date +"%Y.%m.%d-%H.%M")"
        echo "::set-output name=status::success"

# 生成 branch 信息
    - name: Generate branch
      id: Gbranch
      if: steps.commit.outputs.status == 'success' && env.COMMIT_FILES == 'true' && !cancelled()
      run: |
        echo -n "file-" > /tmp/branch.txt
        echo "${{ env.RELEASE_TAG }}" >> /tmp/branch.txt
        echo "::set-env name=PUSH_BRANCH::$(cat /tmp/branch.txt)"

# 生成 tag
    - name: Generate tag
      id: tag
      if: steps.commit.outputs.status == 'success' && env.COMMIT_FILES == 'true' && !cancelled()
      run: |
        echo "::set-env name=RELEASE_TAG::$(date +"%Y.%m.%d-%H.%M")"
        echo "🚀 Auto build" >> release.txt
        echo -n "🔗 [jsdelivr CDN Download](https://cdn.jsdelivr.net/gh/${{ github.repository }}@" >> release.txt
        echo "${{ env.PUSH_BRANCH }}/)" >> release.txt
        echo "::set-output name=status::success"
        
# 将文件 push 到 文件分支
# 注意文件 >100MB 会 PUSH 失败
    - name: Push file
      id: push_file
      if: steps.commit.outputs.status == 'success' && env.PUSH_RELEASE == 'true' && !cancelled()
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.TOKEN }}
        branch: ${{ env.PUSH_BRANCH }}
        force: true
        directory: ${{ env.FIRMWARE }}

# 将 bin 目录上传至 release
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Post notice
      run: |
        wget https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=Make_Done
